# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-VjvGqn2LXXfEH6HhW5xg2qxyKmYCzMZ
"""

!pip install pypdf2
!pip install pdfplumber
import sqlite3
import requests
import datetime
import random
from google.colab import files  # For Google Colab file upload functionality
import docx  # For handling .docx files
import PyPDF2  # For handling .pdf files
import pdfplumber  # For handling .pdf files (optional but better for PDF text extraction)

# Initialize the SQLite database
def init_db():
    conn = sqlite3.connect("summarizer.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS summaries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            original_text TEXT,
            summary TEXT,
            timestamp TEXT
        )
    """)
    conn.commit()
    conn.close()

# Save the original text, summary, and timestamp in the database
def save_to_db(original_text, summary):
    conn = sqlite3.connect("summarizer.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO summaries (original_text, summary, timestamp)
        VALUES (?, ?, ?)
    """, (original_text, summary, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

# Generate a summary using the Hugging Face API
def generate_summary(text, api_key):
    url = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
    headers = {"Authorization": f"Bearer {api_key}"}
    payload = {"inputs": text, "parameters": {"max_length": 150, "min_length": 100, "length_penalty": 2.0}}
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()[0]["summary_text"]
    else:
        raise Exception(f"Error: {response.status_code}, {response.text}")

# Rephrase summary to ensure varied wording
def rephrase_summary(summary):
    synonyms = {
        "important": ["crucial", "vital", "essential", "significant"],
        "help": ["assist", "support", "aid", "benefit"],
        "technology": ["tech", "innovation", "advancement"],
        "increase": ["boost", "raise", "amplify", "enhance"],
        "create": ["generate", "form", "build", "produce"]
    }

    words = summary.split()
    for i, word in enumerate(words):
        for key, value in synonyms.items():
            if word.lower() == key:
                words[i] = random.choice(value)

    return " ".join(words)

# Function to extract text from .txt file
def extract_text_from_txt(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# Function to extract text from .pdf file using PyPDF2
def extract_text_from_pdf(file_path):
    with open(file_path, "rb") as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in range(len(reader.pages)):
            text += reader.pages[page].extract_text()
        return text

# Function to extract text from .pdf file using pdfplumber (better handling for PDFs)
def extract_text_from_pdf_plumber(file_path):
    with pdfplumber.open(file_path) as pdf:
        text = ""
        for page in pdf.pages:
            text += page.extract_text()
        return text

# Function to summarize text from a file
def summarize_from_file(file_path, api_key):
    try:
        file_extension = file_path.split('.')[-1].lower()

        if file_extension == "docx":
            doc = docx.Document(file_path)
            file_content = ""
            for para in doc.paragraphs:
                file_content += para.text + "\n"
        elif file_extension == "txt":
            file_content = extract_text_from_txt(file_path)
        elif file_extension == "pdf":
            file_content = extract_text_from_pdf(file_path)  # Use PyPDF2 or pdfplumber here
        else:
            raise ValueError("Unsupported file format. Please upload a .docx, .txt, or .pdf file.")

        if len(file_content.split()) < 50:  # Check for minimum content
            print("\nError: File should have at least 50 words for summarization.")
            return

        # Generate the summary from file content
        summary = generate_summary(file_content, api_key)

        # Rephrase the summary to vary the output
        varied_summary = rephrase_summary(summary)

        print("\nSummary of the file:")
        print(varied_summary)

        # Save the result to the database
        save_to_db(file_content, varied_summary)
        print("\nSummary saved successfully!")
    except Exception as e:
        print(f"Error generating summary: {e}")

# Function to upload and read a file in Google Colab
def upload_file():
    uploaded = files.upload()  # Allows user to upload file in Colab
    for filename in uploaded.keys():
        return filename

# Main function for text summarization
def main():
    # Ask the user for the Hugging Face API key
    api_key = input("Please enter your Hugging Face API key: ")

    # Initialize the database
    init_db()

    print("Welcome to the Content Summarizer!")

    # Option to summarize text or a file
    choice = input("\nChoose an option:\n1. Summarize Text\n2. Summarize from File\nEnter your choice (1/2): ")

    if choice == '1':
        print("\nEnter your text (any number of lines). When done, type 'END' on a new line.")
        user_input = []
        while True:
            line = input()
            if line.strip().upper() == "END":
                break
            user_input.append(line)

        original_text = " ".join(user_input).strip()

        if len(original_text.split()) < 50:  # Check for minimum content
            print("\nError: Please provide at least 50 words for summarization.")
            return

        try:
            # Generate the summary
            summary = generate_summary(original_text, api_key)

            # Rephrase the summary to vary the output
            varied_summary = rephrase_summary(summary)

            print("\nSummary:")
            print(varied_summary)

            # Save the result to the database
            save_to_db(original_text, varied_summary)
            print("\nSummary saved successfully!")
        except Exception as e:
            print(f"Error generating summary: {e}")

    elif choice == '2':
        # Call the file upload function
        file_path = upload_file()
        summarize_from_file(file_path, api_key)

    else:
        print("Invalid choice! Please choose 1 or 2.")

if __name__ == "__main__":
    main()